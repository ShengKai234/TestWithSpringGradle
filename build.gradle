plugins {
	id 'org.springframework.boot' version '2.6.8'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
//	id "com.palantir.docker" version "0.20.1"
}

apply plugin: 'war'

group = 'com.kkk.spring.test'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 11

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'org.json', name: 'json', version: '20220320'
	implementation 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'
	implementation 'junit:junit:4.13.2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
	testImplementation 'org.mockito:mockito-inline:4.5.1'
	implementation 'com.h2database:h2'
//	testImplementation 'com.h2database:h2'
	providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
}

springBoot {
	mainClass = 'com.kkk.spring.test.TestWithSpringGradle.TestWithSpringGradleApplication'
}

def activeProfiles=project.properties['activeProfiles'] ?: "dev"
import org.apache.tools.ant.filters.ReplaceTokens
processResources {
	println 'activeProfiles: ' + activeProfiles
	with copySpec {
		duplicatesStrategy = 'include'
		from 'src/main/resources'
		include 'logback.xml'
		include 'application.yaml'
		include 'application-' + activeProfiles + '.yaml'
//		include 'application*.yml'
//		include 'application*.yaml'
//		include 'application*.properties'
//		include 'application-' + activeProfiles + '.yml'
//		include 'application-' + activeProfiles + '.properties'
		project.properties.findAll().each {
			prop ->
				if (prop.value != null) {
					filter(ReplaceTokens, tokens: [(prop.key): prop.value.toString()])
				}
		}
	}
}
// Create Jar: ./gradlew -Dspring.profiles.active=dev bootJar


def profiles = 'prod'
bootJar {
	baseName = 'delpoy-server'
	version = '0.0.1'
	mainClass = 'com.kkk.spring.test.TestWithSpringGradle.TestWithSpringGradleApplication'
}
// default: java -jar build/libs/delpoy-server-0.0.1.jar
// default: java -jar build/libs/delpoy-server-0.0.1.jar --spring.config.name=application
// dev: java -jar build/libs/delpoy-server-0.0.1.jar --spring.config.name=application --spring.config.import=./build/resources/main/application-dev.yaml

tasks.named("bootJar") {
	into 'resources', {
		from 'resources'
	}
}

// gradle bootRun --args='--spring.profiles.active=prod'
// gradle bootRun -Dspring.profiles.active=dev
bootRun {
	systemProperties = System.properties
}


tasks.register("bootRunDev") {
	group = "application"
	description = "Runs the Spring Boot application with the dev profile"
	doFirst {
		tasks.bootRun.configure {
			systemProperty("spring.profiles.active", "dev")
		}
	}
	finalizedBy("bootRun")
}


sourceSets {
	main {
		java {
			srcDir 'source'
		}
		resources {
			srcDir 'resources'
			include 'config.properties'
		}
	}
	test {
		java {
			srcDir 'test'
		}
	}
}

jar {
	archiveBaseName = 'gs-gradle'
	archiveVersion =  '0.1.02'
}

tasks.named('test') {
	println 'test...'
	useJUnitPlatform()
}


task intergrationTestForHello(type: Test) {
	println 'intergration Hello...'
	useJUnitPlatform()
	filter {
		includeTestsMatching "Hello*"
	}
}

task intergrationTestForEmployee(type: Test) {
	println 'intergration Employee...'
	useJUnitPlatform()
	filter {
		includeTestsMatching "Employee*"
	}
}

//docker {
//	name "${project.group}/${bootJar.baseName}"
//}

/** run **/
// no arguments
// java -jar -Dspring.profiles.active=test build/libs/delpoy-server-0.0.1.jar
// include arguments
// java -jar -Dspring.profiles.active=test build/libs/delpoy-server-0.0.1.jar --spring.config.location=path...